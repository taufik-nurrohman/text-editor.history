extends _index.pug

block state
  - const scripts = ['../text-editor/index.min.js', 'index.min.js']
  - const styles = ['../layout/index.min.css']
  - const theme = '#000'
  - const title = 'Text Editor History ' + version

block script
  script
    | TextEditor.state.with.push(TextEditor.History);
    |
    | const $in = document.querySelector('#in');
    | const $out = document.querySelector('#out');
    |
    | const editor = new TextEditor($in);
    |
    | editor.on('key.down', function (e) {
    |     if (e.ctrlKey && 'y' === e.key) {
    |         this.redo();
    |         e.preventDefault();
    |         return;
    |     }
    |     if (e.ctrlKey && 'z' === e.key) {
    |         this.undo();
    |         e.preventDefault();
    |         return;
    |     }
    |     setTimeout(() => editor.record(), 1); // Record keyboard interaction
    | });
    |
    | editor.record(); // Record the initial value, selection, and time

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }
    | #out:empty {
    |   display: none;
    | }

block content
  header
    hgroup
      h1
        a(href='../text-editor/index.html#extensions') &laquo;
        = ' ' + title
      p This extension provides custom history feature to overcome the side effect of manipulating a #[code &lt;textarea&gt;] value that cannot automatically update the default history data.
  main
    p: textarea#in(placeholder!='Content goes here&hellip;' spellcheck='false' style={
      'display': 'block',
      'width': '100%'
    })
    p(role='group')
      button(onclick='editor.record().wrap(\'**\', \'**\').record();'): b B
      = ' '
      button(onclick='editor.record().wrap(\'_\', \'_\').record();'): i I
      = ' '
      button(onclick='editor.undo();') Undo
      = ' '
      button(onclick='editor.redo();') Redo
      = ' '
      button(onclick='$out.innerHTML = JSON.stringify(editor.history(), null, 2);') Inspect History
      = ' '
      button(onclick='$out.innerHTML = JSON.stringify(editor.history(1), null, 2);') Inspect the 2(nd) History
      = ' '
      button(onclick='editor.record();') Save Selection to History
      = ' '
      button(onclick='editor.loss();') Delete Current History
      = ' '
      button(onclick='editor.loss(editor.history().length - 1);') Delete the Last History
      = ' '
      button(onclick='editor.loss(0);') Delete the First History
      = ' '
      button(onclick='editor.loss(true);') Delete All History
    pre#out
    h2#usage
      a(href='#usage') #
      = ' Usage'
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      |   TextEditor.state.with.push(TextEditor.History);
      |
      |   const editor = new TextEditor(document.querySelector('textarea'));
      |
      |   editor.record(); // Record the initial value, selection, and time
      |
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
      | const TextEditor = require('@taufik-nurrohman/text-editor').default;
      | const TextEditorHistory = require('@taufik-nurrohman/text-editor.history').default;
      |
      | TextEditor.state.with.push(TextEditorHistory);
      |
      | const editor = new TextEditor(document.querySelector('textarea'));
      |
      | editor.record(); // Record the initial value, selection, and time
    h4 ECMAScript
    pre: code
      | import TextEditor from '@taufik-nurrohman/text-editor';
      | import TextEditorHistory from '@taufik-nurrohman/text-editor.history';
      |
      | TextEditor.state.with.push(TextEditorHistory);
      |
      | const editor = new TextEditor(document.querySelector('textarea'));
      |
      | editor.record(); // Record the initial value, selection, and time
    h2#methods
      a(href='#methods') #
      = ' Methods'
    h3 Instance Methods
    h4: code editor.history(of)
    p Get history data.
    pre: code
      | console.log(editor.history(0)); // Get the first history data
      | console.log(editor.history()); // Get all history data
      | console.log(editor.history(editor.history().length - 1)); // Get the last history data
    h4: code editor.loss(of)
    p Remove previous history data.
    pre: code
      | editor.loss(); // Remove current history data
      | editor.loss(0); // Remove the first history data
      | editor.loss(editor.history().length - 1); // Remove the last history data
      | editor.loss(true); // Remove all history
    h4: code editor.record(of)
    p Store current value, selection, and time to history.
    pre: code
      | editor.record(); // Store current value, selection, and time to history.
      | editor.record(0); // Replace the first history data with current value, selection, and time.
    h4: code editor.redo()
    p Redo previous action.
    pre: code
      | editor.on('key.down', function (e) {
      |     if (e.ctrlKey && 'y' === e.key) {
      |         e.preventDefault();
      |         this.redo();
      |     }
      | });
    h4: code editor.undo()
    p Undo previous action.
    pre: code
      | editor.on('key.down', function (e) {
      |     if (e.ctrlKey && 'z' === e.key) {
      |         e.preventDefault();
      |         this.undo();
      |     }
      | });
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman