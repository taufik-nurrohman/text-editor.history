extends _index.pug

block state
  - const scripts = ['../text-editor/index.min.js', 'index.min.js']
  - const styles = ['../layout/index.min.css']
  - const theme = '#000'
  - const title = 'Text Editor: History ' + version

block script
  script
    | const editor = new TextEditor(document.querySelector('#in'), {
    |     with: [TextEditor.History]
    | });
    |
    | let dump = document.querySelector('#out');
    |
    | editor.self.addEventListener('keydown', e => {
    |     if (e.ctrlKey && 'y' === e.key) {
    |         editor.redo();
    |         e.preventDefault();
    |         return;
    |     }
    |     if (e.ctrlKey && 'z' === e.key) {
    |         editor.undo();
    |         e.preventDefault();
    |         return;
    |     }
    |     setTimeout(() => editor.record(), 1); // Record keyboard interaction
    | });
    |
    | editor.record(); // Record the initial value

block style
  style
    | :root {
    |   border-top: 5px solid #00f;
    | }
    |
    | @media (min-width: 45rem) {
    |   :root {
    |     padding-bottom: 3rem;
    |     padding-top: 3rem;
    |   }
    |   body > * {
    |     margin-left: auto;
    |     margin-right: auto;
    |     max-width: 45rem;
    |   }
    | }

block content
  header
    h1= title
    p History extension for #[a(href='../text-editor/index.html') text editor].
    hr
    p Provides custom history feature to overcome the side effect of manipulating a #[code &lt;textarea&gt;] value that cannot automatically update the default history data.
  main
    p: textarea#in(placeholder!='Type something&hellip;' spellcheck='false' style={
      'display': 'block',
      'width': '100%'
    })
    p(role='group')
      button(onclick='editor.record().wrap(\'**\', \'**\').record();'): b B
      = ' '
      button(onclick='editor.record().wrap(\'_\', \'_\').record();'): i I
      = ' '
      button(onclick='editor.undo();') Undo
      = ' '
      button(onclick='editor.redo();') Redo
      = ' '
      button(onclick='dump.innerHTML = \'History: \' + JSON.stringify(editor.history(), null, 2);') Inspect History
      = ' '
      button(onclick='dump.innerHTML = JSON.stringify(editor.history(1), null, 2);') Inspect the 2(nd) History
      = ' '
      button(onclick='editor.record();') Save Selection to History
      = ' '
      button(onclick='editor.loss();') Delete Current History
      = ' '
      button(onclick='editor.loss(editor.history().length - 1);') Delete the Last History
      = ' '
      button(onclick='editor.loss(0);') Delete the First History
      = ' '
      button(onclick='editor.loss(true);') Delete All History
    pre#out
    h2 Usage
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      |   const editor = new TextEditor(document.querySelector('textarea'), {
      |       with: [TextEditor.History]
      |   });
      |
      |   editor.record(); // Record the initial value
      |
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
      | const TextEditor = require('@taufik-nurrohman/text-editor').default;
      | const TextEditorHistory = require('@taufik-nurrohman/text-editor.history').default;
      |
      | TextEditor.state.with.push(TextEditorHistory); // Load as a core extension
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     with: [TextEditorHistory] // Load as an optional extension
      | });
      |
      | editor.record(); // Record the initial value
    h4 ECMAScript
    pre: code
      | import TextEditor from '@taufik-nurrohman/text-editor';
      | import TextEditorHistory from '@taufik-nurrohman/text-editor.history';
      |
      | TextEditor.state.with.push(TextEditorHistory); // Load as a core extension
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     with: [TextEditorHistory] // Load as an optional extension
      | });
      |
      | editor.record(); // Record the initial value
    h2 Methods
    h3: code editor.history(of)
    p Get history data.
    h3: code editor.loss(of)
    p Remove previous history data.
    h3: code editor.record(of)
    p Store current value and selection to history.
    h3: code editor.redo()
    p Redo previous action.
    h3: code editor.undo()
    p Undo previous action.
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman