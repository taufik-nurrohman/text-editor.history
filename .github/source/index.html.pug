extends _index.pug

block state
  - const title = 'Text Editor History ' + version
  - const scripts = ['../text-editor/index.min.js', 'index.min.js']

block script
  script
    | Object.assign(TE.prototype, TE.History.that);
    |
    | const editor = new TE(document.querySelector('#in'));
    |
    | let dump = document.querySelector('#out');
    |
    | editor.self.addEventListener('keydown', e => {
    |     if (e.ctrlKey && 'y' === e.key) {
    |         editor.redo();
    |         e.preventDefault();
    |         return;
    |     }
    |     if (e.ctrlKey && 'z' === e.key) {
    |         editor.undo();
    |         e.preventDefault();
    |         return;
    |     }
    |     setTimeout(() => editor.record(), 1); // Record keyboard interaction
    | });
    |
    | editor.record(); // Record the initial value

block style
  style
    | * {
    |   box-sizing: border-box;
    | }
    | :root {
    |   background: #fff;
    |   color: #000;
    |   border-top: 4px solid;
    |   font: normal normal 16px/1.25 serif;
    | }
    | a {
    |   color: #009;
    |   text-decoration: none;
    | }
    | a, code {
    |   word-wrap: break-word;
    | }
    | code {
    |   font-family: monospace;
    |   font-size: 80%;
    | }
    | footer, header, main, nav {
    |   max-width: 700px;
    |   margin: 0 auto;
    | }
    | hr {
    |   border: 0;
    |   color: inherit;
    |   border-top: 1px dashed;
    |   height: 0;
    | }
    | pre {
    |   white-space: pre-wrap;
    |   word-wrap: break-word;
    | }
    | pre code {
    |   display: block;
    |   background: #eee;
    |   padding: 1em;
    | }
    | table {
    |   width: 100%;
    | }
    | td, th {
    |   text-align: left;
    |   vertical-align: top;
    | }

block content
  header
    h1= title
    p History extension for #[a(href='../text-editor/index.html') text editor].
    hr
    p Provides custom history feature to overcome the side effect of manipulating a #[code &lt;textarea&gt;] value that cannot automatically update the default history data.
  main
    p: textarea#in(placeholder!='Type something&hellip;' spellcheck='false')
    p
      button(onclick='editor.record().wrap(\'**\', \'**\').record();'): b B
      = ' '
      button(onclick='editor.record().wrap(\'_\', \'_\').record();'): i I
      = ' '
      button(onclick='editor.undo();') Undo
      = ' '
      button(onclick='editor.redo();') Redo
    p
      button(onclick='dump.innerHTML = \'Index: \' + editor._historyState + \'\\n---\\nHistory: \' + JSON.stringify(editor.history(), null, 2);') Inspect History
      = ' '
      button(onclick='dump.innerHTML = JSON.stringify(editor.history(1), null, 2);') Inspect the 2(nd) History
      = ' '
      button(onclick='editor.record();') Save Selection to History
    p
      button(onclick='editor.loss();') Delete Current History
      = ' '
      button(onclick='editor.loss(editor._historyState);') Delete the Last History
      = ' '
      button(onclick='editor.loss(0);') Delete the First History
      = ' '
      button(onclick='editor.loss(true);') Delete All History
    pre#out
    h2 Usage
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      | Object.assign(TE.prototype, TE.History.that);
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
      | const TE = require('@taufik-nurrohman/text-editor');
      | const {that: thatHistory} = require('@taufik-nurrohman/text-editor.history');
      |
      | Object.assign(TE.prototype, thatHistory);
    h4 ECMAScript
    pre: code
      | import TE from '@taufik-nurrohman/text-editor';
      | import {that as thatHistory} from '@taufik-nurrohman/text-editor.history';
      |
      | Object.assign(TE.prototype, thatHistory);
    h2 Methods
    h3 editor.history(index)
    p Get history data.
    h3 editor.record(index)
    p Store current value and selection to history.
    h3 editor.loss(index)
    p Remove previous history data.
    h3 editor.undo()
    p Undo previous action.
    h3 editor.redo()
    p Redo previous action.
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman
